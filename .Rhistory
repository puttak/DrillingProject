df= sqlQuery(cn, "SELECT * FROM Well_31862 WHERE [Hole Depth] > 0 ")
close(cn)
## Remove spaces from column names
names(df) = gsub(" ","",names(df))
names(df) = gsub("-","",names(df))
names(df) = gsub("#","",names(df))
## change all column types to numeric
colIndex = c(2:ncol(df))
df[,colIndex] = apply(df[,colIndex],2,function(x) as.numeric(as.character(x)))
## remove rows where hole depth is < 0
df = df[df$HoleDepth > 0, ]
## Remove constant columns
colIndex = c(2:ncol(df))
sdVector = apply(df[,colIndex],2,function(x) sd(x, na.rm = TRUE))
constantCols = names(which(sdVector<=1))
df = df[,-which(names(df) %in% constantCols)]
## Keep a set of columns that have a good distribution
## This was manual done by looking at histograms
##neededCols = c("DateTime","HoleDepth","AccumRotations","AccumTripOut","ADBitWeight","ADROP","ADTargetBitWeight","ADTargetDiffPress","ADTargetROP","AnnularVelocity","BHALength","BitHours","BitPosition","BitSize","BitTVD","BlockHeight","CirculatingHrs","Co.ManG/L","CutandSlip","DegasserTankS10DAQ","DiffPress","GainLoss","GainLoss-Spare","GammaDepth","GammaDepth(2)","GammaRay","HookLoad","KellyDown","Last24HrWear","LstElemLen","LstJntTime","MudVolume","PipeLength","PipeLengthChange","PitVolume1","PillTank","PitVolume2","PitVolume3","PitVolume4","PitVolume5","Flock1","PumpPressure","PumpSPM-Total","PumpSPM1","PumpSPM2","QLDepthDelay","QLReturnsDepth","QLStartDepth","QLStksBtUp","QLStrokesToSurface","ReturnsDepth-Realtime","RigActivityEngine","ROP-Average","ROP-CutUnit","ROP-Fast","ROP-Fast(2)","RunJntTime","SoftSpeedEffectivePipeOuterDiameter","SoftSpeedEstimatedBHASpeed","SoftSpeedStickSlipAnalyzerTime","SoftSpeedStickSlipSeverity","SoftSpeedTally#2ID","SoftSpeedTally#2length","SoftSpeedTally#3length","SoftSpeedTDSHeartbeat","SoftSpeedTopDriveActualTorque","SoftSpeedTopDriveSpeed","SoftSpeedTopDriveSpeedSetpoint","SoftSpeedTopDriveTorqueLimit","StringLength","Strks-Fill","Strks-Total","SvyAzimuth","SvyInclination","ToolfaceGrav","ToolfaceMag","TopDriveRPM","TotalGas(GW)","TVD","TVD(2)","TVD(wits)","WeightonBit","WPDA-AvgMSE","WPDA-BitRPM","WPDA-MSE","WPDA-MudMotorRPM","WPDA-MudMotorTorque","WPDA-Status","DogLegSeverity")
##df = df[,which(names(df) %in% neededCols)]
## Identify and remove variables with more than a 100 missing values in the dataset
missValues = sapply(df,function(x) sum(x == -999.25))
missVariables = names(missValues[missValues>=100])
df = df[,-which(names(df) %in% missVariables)]
## Remove rows with missing values for the remaining list
df[df==-999.25] = NA
df = df[complete.cases(df),]
## Split experiments based on their bit change
ds_1 = df[df$HoleDepth >= 6 & df$HoleDepth <= 458, ]
ds_2 = df[df$HoleDepth >= 459 & df$HoleDepth <= 2067, ]
ds_3 = df[df$HoleDepth >= 2068 & df$HoleDepth <= 2296, ]
ds_4 = df[df$HoleDepth >= 2297 & df$HoleDepth <= 4258, ]
ds_5 = df[df$HoleDepth >= 4259 & df$HoleDepth <= 4759, ]
## ds2
ds_2 = ds_2[order(ds_2$DateTime, decreasing = TRUE),]
dt= data.table(ds_2)
df = as.data.frame(dt[,DateIndex := 1:.N])
## Remove the last two horus of data
skipHours = 3
skipIndex = 2 * 3600 / 10
df = df[df$DateIndex >= skipIndex, ]
## Reset the Index
ds_2 = df[order(df$DateIndex),]
dt_2= data.table(ds_2)
df_2 = as.data.frame(dt_2[,DateIndexNew := 1:.N])
eventHours = 4
eventIndex = eventHours * 3600 / 10
df_2$EventClass = ifelse(df_2$DateIndexNew <= eventIndex, 1, 0)
head(df_2)
gplot(data = df_2, aes(x = DateTime, y = HoleDepth)) + geom_line()
ggplot(data = df_2, aes(x = DateTime, y = HoleDepth)) + geom_line()
ggplot(data = df_2, aes(x = DateTime, y = HoleDepth)) + geom_line() + geom_point()
tail(df_2)
library(lubridate)
?mdy_hm
Sys.setenv(TZ = "MT")
Sys.getenv(TZ)
Sys.getenv("TZ")
head(df_2)
?Sys.timezone
Sys.setenv(TZ = "MX")
Sys.getenv("TZ")
head(df_2)
Sys.setenv(TZ = "UTC")
head(df_2)
Sys.setenv(TZ = "canada\Mountain")
Sys.setenv(TZ = "canada\\Mountain")
Sys.getenv("TZ")
Sys.unsetenv(TZ)
Sys.unsetenv("TZ')
Sys.unsetenv("TZ")
Sys.getenv("TZ")
head(df_2)
df_2$DateFormatted = mdy_hm(df_2$DateTime)
df_2$DateFormatted = mdy_hm(df_2$DateTime, tz= "UTC")
Sys.getlocale("LC_TIME")
head(df_2)
str(df_2)
df_2$DateFormatted = mdy_hm(df_2$DateTime)
tail(df_2)
dh = df_2[df_2$DateTime >= "2016-12-22 11:47:39 ", ]
head(dh)
dh = df_2[df_2$DateTime <= "2016-12-22 11:47:39 ", ]
head(dh)
dr = data.frame(a=1:10)
dr
dr[, D:= shift(a, 1L, type="lag")]
dr$b = shift(dr$a,1L,type="lag")
dr
dr$b = shift(dr$a,1L,type="lead")
dr
?shift
dr$b = shift(dr$a,1L,type="lead",fill = 0)
dr
dr = data.frame(a=1:10)
dr$a = dr$a - shift(dr$a,1L,type="lag",fill=0)
dr
head(df_2)
gdf = grep("Target",names(df_2),value = TRUE)
gdf
head(df_2)
tdf = df_2[,- grep("Target",names(df_2),value = TRUE)]
?shift
c= (repeat(10,10))
?repeat
?rep
x = rep.int(100, 100)
x
sd(x)
average(x)
mean(x)
?abs
print(Now())
Sys.time()
print(Sys.time())
knitr::opts_chunk$set(echo = TRUE)
library(RODBC);
library(ggplot2);
library(data.table);
library(googleVis);
library(reshape2);
library(dplyr);
library(lubridate);
library(Boruta);
library(caret);
library(mlbench);
library(e1071);
library(rattle);
library(rpart);
library(rpart.plot);
library(randomForest);
library(ROCR);
library(glmnet);
library(ROSE);
library(corrplot);
setwd("C:\\Development\\R Projects\\MachineLearningProjects\\DrillingProject")
source("DrillingFileReader.R")
source("RemoveUnwantedRows.R")
source("NormalizeAccumCols.R")
source("DrillingClassLabel.R")
source("RemoveUnwantedCols.R")
source("CalculateVarImport.R")
source("ReturnConfusionMatrix.R")
source("FacetWrapLineChart.R")
df_original_31862 = DrillingFileReader(wellName = "well_31862")
dim(df_original_31862)
df_original_31943 = DrillingFileReader(wellName = "well_31943")
dim(df_original_31943)
df_original_31944 = DrillingFileReader(wellName = "well_31944")
dim(df_original_31944)
df_original_31945 = DrillingFileReader(wellName = "well_31945")
dim(df_original_31944)
df_original_31946 = DrillingFileReader(wellName = "well_31946")
dim(df_original_31946)
df_original_31947 = DrillingFileReader(wellName = "well_31947")
dim(df_original_31947)
df_original_31948 = DrillingFileReader(wellName = "well_31948")
dim(df_original_31948)
df_original_32202 = DrillingFileReader(wellName = "well_32202")
dim(df_original_32202)
options(warn = -1)
constCols_31862 = DetectConstantCols(dataSource = df_original_31862)
constCols_31862
ggplot(data = df_original_31862, aes(x = DateTime , y = AirPressure)) + geom_line()
uniqueConstCols = unique(c(constCols_31862, constCols_31943, constCols_31944, constCols_31945, constCols_31946, constCols_31947, constCols_31948, constCols_32202))
options(warn = -1)
constCols_31862 = DetectConstantCols(dataSource = df_original_31862)
constCols_31862
ggplot(data = df_original_31862, aes(x = DateTime , y = AirPressure)) + geom_line()
constCols_31943 = DetectConstantCols(dataSource = df_original_31943)
constCols_31944 = DetectConstantCols(dataSource = df_original_31944)
constCols_31945 = DetectConstantCols(dataSource = df_original_31945)
constCols_31946 = DetectConstantCols(dataSource = df_original_31946)
constCols_31947 = DetectConstantCols(dataSource = df_original_31947)
constCols_31948 = DetectConstantCols(dataSource = df_original_31948)
constCols_32202 = DetectConstantCols(dataSource = df_original_32202)
options(war = 0)
## Constant Columns from different wells
uniqueConstCols = unique(c(constCols_31862, constCols_31943, constCols_31944, constCols_31945, constCols_31946, constCols_31947, constCols_31948, constCols_32202))
uniqueConstCols
df_0_31862 = RemoveColsList(df_original_31862,uniqueConstCols)
df_0_31943 = RemoveColsList(df_original_31943,uniqueConstCols)
df_0_31944 = RemoveColsList(df_original_31944,uniqueConstCols)
df_0_31945 = RemoveColsList(df_original_31945,uniqueConstCols)
df_0_31946 = RemoveColsList(df_original_31946,uniqueConstCols)
df_0_31947 = RemoveColsList(df_original_31947,uniqueConstCols)
df_0_31948 = RemoveColsList(df_original_31948,uniqueConstCols)
df_0_32202 = RemoveColsList(df_original_32202,uniqueConstCols)
dfRemConstCols = data.frame(FeatureName = uniqueConstCols, Reason = "Constant Column - Zero Variance", WellName = "All Wells", Version = "Main")
missCols_31862 = DetectColsWithMissingValues(df_0_31862, missValuesPercent= 5)
missCols_31862
missCols_31943 = DetectColsWithMissingValues(df_0_31943, missValuesPercent= 5)
missCols_31943
missCols_31944 = DetectColsWithMissingValues(df_0_31944, missValuesPercent= 5)
missCols_31944
missCols_31945 = DetectColsWithMissingValues(df_0_31945, missValuesPercent= 5)
missCols_31945
missCols_31946 = DetectColsWithMissingValues(df_0_31946, missValuesPercent= 5)
missCols_31946
missCols_31947 = DetectColsWithMissingValues(df_0_31947, missValuesPercent= 5)
missCols_31947
missCols_31948 = DetectColsWithMissingValues(df_0_31948, missValuesPercent= 5)
missCols_31948
missCols_32202 = DetectColsWithMissingValues(df_0_32202, missValuesPercent= 5)
missCols_32202
uniqueMissCols = unique(c(missCols_31862, missCols_31943, missCols_31944, missCols_31945, missCols_31946, missCols_31947, missCols_31948, missCols_32202))
uniqueMissCols
df_1_31862 = RemoveColsList(df_0_31862, uniqueMissCols)
df_1_31943 = RemoveColsList(df_0_31943, uniqueMissCols)
df_1_31944 = RemoveColsList(df_0_31944, uniqueMissCols)
df_1_31945 = RemoveColsList(df_0_31945, uniqueMissCols)
df_1_31946 = RemoveColsList(df_0_31946, uniqueMissCols)
df_1_31947 = RemoveColsList(df_0_31947, uniqueMissCols)
df_1_31948 = RemoveColsList(df_0_31948, uniqueMissCols)
df_1_32202 = RemoveColsList(df_0_32202, uniqueMissCols)
dfRemMissCols = data.frame(FeatureName = uniqueMissCols, Reason = "Missing Columns - More than 5% of rows", WellName = "All Wells", Version = "Main")
ggplot(data = df_1_31862, aes(x = DateTime, y = HoleDepth)) + geom_line()
accumColToNormalize = c("HoleDepth","AccumRotations","BitHours","BitPosition","BitTVD","CirculatingHrs","CutandSlip","GammaDepth","KellyDown","PipeLength","PipeLengthChange",
"QLStartDepth","SoftSpeedStringLength","StringLength","StrksFill","TVD","QLStrokesToSurface","QLStksBtUp","HookLoad")
accumColToNormalize = accumColToNormalize[-(which(accumColToNormalize %in% c(uniqueMissCols, uniqueConstCols)))]
df_1_31862 = NormalizeAccumCols(df_1_31862, accumColToNormalize)
df_1_31943 = NormalizeAccumCols(df_1_31943, accumColToNormalize)
df_1_31944 = NormalizeAccumCols(df_1_31944, accumColToNormalize)
df_1_31945 = NormalizeAccumCols(df_1_31945, accumColToNormalize)
df_1_31946 = NormalizeAccumCols(df_1_31946, accumColToNormalize)
df_1_31947 = NormalizeAccumCols(df_1_31947, accumColToNormalize)
df_1_31948 = NormalizeAccumCols(df_1_31948, accumColToNormalize)
df_1_32202 = NormalizeAccumCols(df_1_32202, accumColToNormalize)
accumColToNormalize = accumColToNormalize[-which(accumColToNormalize %in% c("HoleDepth"))]
df_1_31862 = RemoveColsList(df_1_31862, accumColToNormalize)
df_1_31943 = RemoveColsList(df_1_31943, accumColToNormalize)
df_1_31944 = RemoveColsList(df_1_31944, accumColToNormalize)
df_1_31945 = RemoveColsList(df_1_31945, accumColToNormalize)
df_1_31946 = RemoveColsList(df_1_31946, accumColToNormalize)
df_1_31947 = RemoveColsList(df_1_31947, accumColToNormalize)
df_1_31948 = RemoveColsList(df_1_31948, accumColToNormalize)
df_1_32202 = RemoveColsList(df_1_32202, accumColToNormalize)
dfRemAccumtCols = data.frame(FeatureName = accumColToNormalize, Reason = "Accum Columns Replaced with Diff Columns", WellName = "All Wells", Version = "Main")
unwantedColsKurt =  c("ADTargetWeight", "ADTargetBitWeight", "ADTargetDiffPress","ADTargetROP","ADTargetTorque","PitVolume5","PitVolume4","PitVolume3","PitVolume2","PitVolume1")
unwantedColsKurt
df_1_31862 = RemoveColsList(df_1_31862, unwantedColsKurt)
df_1_31943 = RemoveColsList(df_1_31943, unwantedColsKurt)
df_1_31944 = RemoveColsList(df_1_31944, unwantedColsKurt)
df_1_31945 = RemoveColsList(df_1_31945, unwantedColsKurt)
df_1_31946 = RemoveColsList(df_1_31946, unwantedColsKurt)
df_1_31947 = RemoveColsList(df_1_31947, unwantedColsKurt)
df_1_31948 = RemoveColsList(df_1_31948, unwantedColsKurt)
df_1_32202 = RemoveColsList(df_1_32202, unwantedColsKurt)
rm(df_0_31862)
rm(df_0_31943)
rm(df_0_31944)
rm(df_0_31945)
rm(df_0_31946)
rm(df_0_31947)
rm(df_0_31948)
rm(df_0_32202)
df_1_31862_exp1 = df_1_31862[df_1_31862$HoleDepth>= 2296 & df_1_31862$HoleDepth<= 4258, ]
dim(df_1_31862_exp1)
df_1_31943_exp1 = df_1_31943[df_1_31943$HoleDepth>= 458 & df_1_31943$HoleDepth<= 1626, ]
dim(df_1_31943_exp1)
df_1_31943_exp2 = df_1_31943[df_1_31943$HoleDepth>= 2095 & df_1_31943$HoleDepth<= 3828, ]
dim(df_1_31943_exp2)
df_1_31945_exp1 = df_1_31945[df_1_31945$HoleDepth>= 2278 & df_1_31945$HoleDepth<= 3311, ]
dim(df_1_31945_exp1)
df_1_31946_exp1 = df_1_31946[df_1_31946$HoleDepth>= 2153 & df_1_31946$HoleDepth<= 3767, ]
dim(df_1_31946_exp1)
df_1_32202_exp1 = df_1_32202[df_1_32202$HoleDepth>= 455 & df_1_32202$HoleDepth<=999, ]
dim(df_1_32202_exp1)
facetWrapData = rbind(cbind(melt(df_1_31862_exp1,id.vars = c("DateTime")),Depth = "Well_31862_exp1"),
cbind(melt(df_1_31943_exp1,id.vars = c("DateTime")),Depth = "Well_31943_exp1"),
cbind(melt(df_1_31943_exp2,id.vars = c("DateTime")),Depth = "Well_31943_exp2"),
cbind(melt(df_1_31945_exp1,id.vars = c("DateTime")),Depth = "Well_31945_exp1"),
cbind(melt(df_1_31946_exp1,id.vars = c("DateTime")),Depth = "Well_31946_exp1"),
cbind(melt(df_1_32202_exp1,id.vars = c("DateTime")),Depth = "Well_32202_exp1")
)
myLinePlot = function(plotCol){
p = FacetWrapLineChart(df = facetWrapData, variableName = plotCol)
p
}
colNames = colnames(df_1_31862_exp1)
facetColNames = unique(colNames[!(colNames %in% c("DateTime"))])
dfm_HoleDepthDiff = facetWrapData[facetWrapData$variable %in% c("HoleDepthDiff"),]
dfm_BHALength = facetWrapData[facetWrapData$variable %in% c("BHALength"),]
title <- paste("Line Plots for HoleDepth across time faceted well")
p = ggplot(data = dfm_HoleDepthDiff, aes_string(x = "DateTime", y = "value")) + geom_line()
p = p + geom_point()
p = p + facet_wrap(~ Depth , scales="free")
p = p + ggtitle(title)
p
head(dfm_HoleDepthDiff)
head(facetWrapData)
head(facetWrapData[facetWrapData$variable %in% c("HoleDepthDiff"),])
unique(facetWrapData$variable)
sort(unique(facetWrapData$variable))
title <- paste("Line Plots for BHALength across time faceted by Bits")
p = ggplot(data = dfm_BHALength, aes_string(x = "DateTime", y = "value")) + geom_line()
p = p + geom_point()
p = p + facet_wrap(~ Depth , scales="free")
p = p + ggtitle(title)
p
list.files()
load("TransformationSummaryFiles.RData")
setwd("C:\\Development\\R Projects\\MachineLearningProjects\\DrillingProject")
load("TransformationSummaryFiles.RData")
df_Importance
aggregate(df_Importance[,c("value")], by = list(df_Importance$VariableName), "sum")
aggregate(df_Importance[,c("VariableImportance")], by = list(df_Importance$VariableName), "sum")
aggImp = aggregate(df_Importance[,c("VariableImportance")], by = list(df_Importance$VariableName), "sum")
aggImp[order(aggImp$x),]
aggImp[order(aggImp$x, decreasing = TRUE),]
rm(list = list(glmOriginal=fit.glm.original,
glmUnder = fit.glm.under,
glmOver = fit.glm.over,
#glmRose = fit.glm.rose,
ldaOriginal=fit.lda.original,
ldaUnder = fit.lda.under,
ldaOver = fit.lda.over,
#ldaRose = fit.lda.rose,
glmnetOriginal=fit.glmnet.original,
glmnetUnder = fit.glmnet.under,
glmnetOver = fit.glmnet.over,
#glmnetRose = fit.glmnet.rose,
knnOriginal=fit.knn.original,
knnUnder = fit.knn.under,
#knnRose = fit.knn.rose,
rpartOriginal=fit.rpart.original,
rpartUnder= fit.rpart.under,
rpartOver = fit.rpart.over,
#rpartRose = fit.rpart.rose,
svmOriginal=fit.svm.original,
svmUnder = fit.svm.under,
svmOver = fit.svm.over,
nbOriginal =  fit.nb.original,
nbUnder  = fit.nb.under,
nbOver = fit.nb.over
#svmRose = fit.svm.rose
))
?rm
library(RODBC);
library(ggplot2);
library(data.table);
library(googleVis);
library(reshape2);
library(dplyr);
library(lubridate);
library(Boruta);
library(caret);
library(mlbench);
library(e1071);
library(rattle);
library(rpart);
library(rpart.plot);
library(randomForest);
library(ROCR);
library(glmnet);
library(ROSE);
library(corrplot);
setwd("C:\\Development\\R Projects\\MachineLearningProjects\\DrillingProject")
source("DrillingFileReader.R")
source("RemoveUnwantedRows.R")
source("NormalizeAccumCols.R")
source("DrillingClassLabel.R")
source("RemoveUnwantedCols.R")
source("CalculateVarImport.R")
source("ReturnConfusionMatrix.R")
source("FacetWrapLineChart.R")
df_original_31862 = DrillingFileReader(wellName = "well_31862")
dim(df_original_31862)
df_original_31943 = DrillingFileReader(wellName = "well_31943")
dim(df_original_31943)
df_original_31944 = DrillingFileReader(wellName = "well_31944")
dim(df_original_31944)
df_original_31945 = DrillingFileReader(wellName = "well_31945")
dim(df_original_31944)
df_original_31946 = DrillingFileReader(wellName = "well_31946")
dim(df_original_31946)
df_original_31947 = DrillingFileReader(wellName = "well_31947")
dim(df_original_31947)
df_original_31948 = DrillingFileReader(wellName = "well_31948")
dim(df_original_31948)
df_original_32202 = DrillingFileReader(wellName = "well_32202")
dim(df_original_32202)
options(warn = -1)
constCols_31862 = DetectConstantCols(dataSource = df_original_31862)
constCols_31862
ggplot(data = df_original_31862, aes(x = DateTime , y = AirPressure)) + geom_line()
constCols_31943 = DetectConstantCols(dataSource = df_original_31943)
constCols_31944 = DetectConstantCols(dataSource = df_original_31944)
constCols_31945 = DetectConstantCols(dataSource = df_original_31945)
constCols_31946 = DetectConstantCols(dataSource = df_original_31946)
constCols_31947 = DetectConstantCols(dataSource = df_original_31947)
constCols_31948 = DetectConstantCols(dataSource = df_original_31948)
constCols_32202 = DetectConstantCols(dataSource = df_original_32202)
options(war = 0)
uniqueConstCols = unique(c(constCols_31862, constCols_31943, constCols_31944, constCols_31945, constCols_31946, constCols_31947, constCols_31948, constCols_32202))
uniqueConstCols
df_0_31862 = RemoveColsList(df_original_31862,uniqueConstCols)
df_0_31943 = RemoveColsList(df_original_31943,uniqueConstCols)
df_0_31944 = RemoveColsList(df_original_31944,uniqueConstCols)
df_0_31945 = RemoveColsList(df_original_31945,uniqueConstCols)
df_0_31946 = RemoveColsList(df_original_31946,uniqueConstCols)
df_0_31947 = RemoveColsList(df_original_31947,uniqueConstCols)
df_0_31948 = RemoveColsList(df_original_31948,uniqueConstCols)
df_0_32202 = RemoveColsList(df_original_32202,uniqueConstCols)
dfRemConstCols = data.frame(FeatureName = uniqueConstCols, Reason = "Constant Column - Zero Variance", WellName = "All Wells", Version = "Main")
missCols_31862 = DetectColsWithMissingValues(df_0_31862, missValuesPercent= 5)
missCols_31862
missCols_31943 = DetectColsWithMissingValues(df_0_31943, missValuesPercent= 5)
missCols_31943
missCols_31944 = DetectColsWithMissingValues(df_0_31944, missValuesPercent= 5)
missCols_31944
missCols_31945 = DetectColsWithMissingValues(df_0_31945, missValuesPercent= 5)
missCols_31945
missCols_31946 = DetectColsWithMissingValues(df_0_31946, missValuesPercent= 5)
missCols_31946
missCols_31947 = DetectColsWithMissingValues(df_0_31947, missValuesPercent= 5)
missCols_31947
missCols_31948 = DetectColsWithMissingValues(df_0_31948, missValuesPercent= 5)
missCols_31948
missCols_32202 = DetectColsWithMissingValues(df_0_32202, missValuesPercent= 5)
missCols_32202
uniqueMissCols = unique(c(missCols_31862, missCols_31943, missCols_31944, missCols_31945, missCols_31946, missCols_31947, missCols_31948, missCols_32202))
uniqueMissCols
df_1_31862 = RemoveColsList(df_0_31862, uniqueMissCols)
df_1_31943 = RemoveColsList(df_0_31943, uniqueMissCols)
df_1_31944 = RemoveColsList(df_0_31944, uniqueMissCols)
df_1_31945 = RemoveColsList(df_0_31945, uniqueMissCols)
df_1_31946 = RemoveColsList(df_0_31946, uniqueMissCols)
df_1_31947 = RemoveColsList(df_0_31947, uniqueMissCols)
df_1_31948 = RemoveColsList(df_0_31948, uniqueMissCols)
df_1_32202 = RemoveColsList(df_0_32202, uniqueMissCols)
dfRemMissCols = data.frame(FeatureName = uniqueMissCols, Reason = "Missing Columns - More than 5% of rows", WellName = "All Wells", Version = "Main")
ggplot(data = df_1_31862, aes(x = DateTime, y = HoleDepth)) + geom_line()
accumColToNormalize = c("HoleDepth","AccumRotations","BitHours","BitPosition","BitTVD","CirculatingHrs","CutandSlip","GammaDepth","KellyDown","PipeLength","PipeLengthChange",
"QLStartDepth","SoftSpeedStringLength","StringLength","StrksFill","TVD","QLStrokesToSurface","QLStksBtUp","HookLoad")
accumColToNormalize = accumColToNormalize[-(which(accumColToNormalize %in% c(uniqueMissCols, uniqueConstCols)))]
df_1_31862 = NormalizeAccumCols(df_1_31862, accumColToNormalize)
df_1_31943 = NormalizeAccumCols(df_1_31943, accumColToNormalize)
df_1_31944 = NormalizeAccumCols(df_1_31944, accumColToNormalize)
df_1_31945 = NormalizeAccumCols(df_1_31945, accumColToNormalize)
df_1_31946 = NormalizeAccumCols(df_1_31946, accumColToNormalize)
df_1_31947 = NormalizeAccumCols(df_1_31947, accumColToNormalize)
df_1_31948 = NormalizeAccumCols(df_1_31948, accumColToNormalize)
df_1_32202 = NormalizeAccumCols(df_1_32202, accumColToNormalize)
accumColToNormalize = accumColToNormalize[-which(accumColToNormalize %in% c("HoleDepth"))]
df_1_31862 = RemoveColsList(df_1_31862, accumColToNormalize)
df_1_31943 = RemoveColsList(df_1_31943, accumColToNormalize)
df_1_31944 = RemoveColsList(df_1_31944, accumColToNormalize)
df_1_31945 = RemoveColsList(df_1_31945, accumColToNormalize)
df_1_31946 = RemoveColsList(df_1_31946, accumColToNormalize)
df_1_31947 = RemoveColsList(df_1_31947, accumColToNormalize)
df_1_31948 = RemoveColsList(df_1_31948, accumColToNormalize)
df_1_32202 = RemoveColsList(df_1_32202, accumColToNormalize)
dfRemAccumtCols = data.frame(FeatureName = accumColToNormalize, Reason = "Accum Columns Replaced with Diff Columns", WellName = "All Wells", Version = "Main")
unwantedColsKurt =  c("ADTargetWeight", "ADTargetBitWeight", "ADTargetDiffPress","ADTargetROP","ADTargetTorque","PitVolume5","PitVolume4","PitVolume3","PitVolume2","PitVolume1")
unwantedColsKurt
df_1_31862 = RemoveColsList(df_1_31862, unwantedColsKurt)
df_1_31943 = RemoveColsList(df_1_31943, unwantedColsKurt)
df_1_31944 = RemoveColsList(df_1_31944, unwantedColsKurt)
df_1_31945 = RemoveColsList(df_1_31945, unwantedColsKurt)
df_1_31946 = RemoveColsList(df_1_31946, unwantedColsKurt)
df_1_31947 = RemoveColsList(df_1_31947, unwantedColsKurt)
df_1_31948 = RemoveColsList(df_1_31948, unwantedColsKurt)
df_1_32202 = RemoveColsList(df_1_32202, unwantedColsKurt)
rm(df_0_31862)
rm(df_0_31943)
rm(df_0_31944)
rm(df_0_31945)
rm(df_0_31946)
rm(df_0_31947)
rm(df_0_31948)
rm(df_0_32202)
df_1_31862_exp1 = df_1_31862[df_1_31862$HoleDepth>= 2296 & df_1_31862$HoleDepth<= 4258, ]
dim(df_1_31862_exp1)
df_1_31943_exp1 = df_1_31943[df_1_31943$HoleDepth>= 458 & df_1_31943$HoleDepth<= 1626, ]
dim(df_1_31943_exp1)
df_1_31943_exp2 = df_1_31943[df_1_31943$HoleDepth>= 2095 & df_1_31943$HoleDepth<= 3828, ]
dim(df_1_31943_exp2)
df_1_31945_exp1 = df_1_31945[df_1_31945$HoleDepth>= 2278 & df_1_31945$HoleDepth<= 3311, ]
dim(df_1_31945_exp1)
df_1_31946_exp1 = df_1_31946[df_1_31946$HoleDepth>= 2153 & df_1_31946$HoleDepth<= 3767, ]
dim(df_1_31946_exp1)
df_1_32202_exp1 = df_1_32202[df_1_32202$HoleDepth>= 455 & df_1_32202$HoleDepth<=999, ]
dim(df_1_32202_exp1)
facetWrapData = rbind(cbind(melt(df_1_31862_exp1,id.vars = c("DateTime")),Depth = "Well_31862_exp1"),
cbind(melt(df_1_31943_exp1,id.vars = c("DateTime")),Depth = "Well_31943_exp1"),
cbind(melt(df_1_31943_exp2,id.vars = c("DateTime")),Depth = "Well_31943_exp2"),
cbind(melt(df_1_31945_exp1,id.vars = c("DateTime")),Depth = "Well_31945_exp1"),
cbind(melt(df_1_31946_exp1,id.vars = c("DateTime")),Depth = "Well_31946_exp1"),
cbind(melt(df_1_32202_exp1,id.vars = c("DateTime")),Depth = "Well_32202_exp1")
)
myLinePlot = function(plotCol){
p = FacetWrapLineChart(df = facetWrapData, variableName = plotCol)
p
}
colNames = colnames(df_1_31862_exp1)
facetColNames = unique(colNames[!(colNames %in% c("DateTime"))])
dfm_ADBitWeight = facetWrapData[facetWrapData$variable %in% c("ADBitWeight"),]
dfm_BHALength = facetWrapData[facetWrapData$variable %in% c("BHALength"),]
title <- paste("Line Plots for ADBitWeight across time faceted well")
p = ggplot(data = dfm_ADBitWeight, aes_string(x = "DateTime", y = "value")) + geom_line()
p = p + geom_point()
p = p + facet_wrap(~ Depth , scales="free")
p = p + ggtitle(title)
p
load("df_1_31862_exp1_models.rda")
x listOfModels[["glmOriginal"]]
x = listOfModels[["glmOriginal"]]
summarise(x)
summary(x)
rm(list = list( listOfModels ))
rm(listOfModels)
